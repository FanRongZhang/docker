user  nginx;
daemon off;
#worker_processes  auto;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  102400;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

	#TCP_CORK优化了传输的bits效率，tcp_nodelay优化了传输的packet效率。
    sendfile        on;#如果需要提供网络的传输效率，应该减少小包的传输，使用TCP_CORK来做汇总传输，在利用sendfile来提高效率；
    tcp_nopush      on;#开启或者关闭nginx在FreeBSD上使用TCP_NOPUSH套接字选项， 在Linux上使用TCP_CORK套接字选项。 选项仅在使用sendfile的时候才开启。
    tcp_nodelay     on;#开启或关闭nginx使用TCP_NODELAY选项的功能。 这个选项仅在将连接转变为长连接的时候才被启用。（译者注，在upstream发送响应到客户端时也会启用）。

	gzip on;
	gzip_min_length 1k;
	gzip_buffers 4 16k;
	#gzip_http_version 1.0;
	gzip_comp_level 4;
	gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	gzip_vary off;
	gzip_disable "MSIE [1-6]\.";

    keepalive_timeout   65;
    types_hash_max_size 2048;
    client_header_timeout 60;
	client_header_buffer_size 1024k;
	client_max_body_size     50m;
    client_body_buffer_size  2040k;
	fastcgi_buffers 10 128k;
	fastcgi_buffer_size 128k;

    #server{
    #    listen 80;
    #    server_name _;
    #    return 404;
    #}

    include /etc/nginx/conf.d/*.conf;
}
